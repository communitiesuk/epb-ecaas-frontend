/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	"/beta/future-homes-standard-compliance": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
         * Check Future Homes Standard (FHS) compliance
         * @description Check compliance with the Future Homes Standard (FHS) based on the energy performance of a building calculated using the Home Energy Model (HEM).
         */
		post: operations["FHSCompliance"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		ElectricBatteryCommon: {
			capacity: number;
			charge_discharge_efficiency_round_trip: number;
			minimum_charge_rate_one_way_trip: number;
			maximum_charge_rate_one_way_trip: number;
			maximum_discharge_rate_one_way_trip: number;
			/** @enum {unknown} */
			battery_location: ElectricBatteryCommonBattery_location;
		};
		ElectricBatteryGridCharging: components["schemas"]["ElectricBatteryCommon"] & {
			/** @constant */
			grid_charging_possible: true;
			threshold_charges: number[];
			threshold_prices: number[];
			tariff: string;
		};
		ElectricBatteryNoGridCharging: components["schemas"]["ElectricBatteryCommon"] & {
			/** @constant */
			grid_charging_possible: false;
		};
		HotWaterTankCommon: {
			/** @enum {unknown} */
			type: HotWaterTankCommonType;
			volume: number;
			init_temp?: number;
			daily_losses: number;
			primary_pipework?: {
				/** @enum {unknown} */
				location: HotWaterTankCommonPrimary_pipeworkLocation;
				internal_diameter_mm: number;
				external_diameter_mm: number;
				length: number;
				insulation_thermal_conductivity: number;
				insulation_thickness_mm: number;
				surface_reflectivity: boolean;
				/** @enum {unknown} */
				pipe_contents: HotWaterTankCommonPrimary_pipeworkPipe_contents;
			}[];
			HeatSource: {
				[key: string]: {
					/** @enum {unknown} */
					type: HotWaterTankCommonHeatSourceType;
					name?: string;
					Controlmin?: string;
					Controlmax?: string;
					heater_position: number;
					thermostat_position: number;
				} & (unknown & unknown & unknown & unknown);
			};
			if?: {
				HeatSource?: {
					[key: string]: {
						/** @constant */
						type?: "HeatPump_HWOnly";
					};
				};
			};
			then?: {
				heat_exchanger_surface_area: number;
			};
		};
		EnergySupplyGas: {
			/** @enum {unknown} */
			fuel: EnergySupplyGasFuel;
		};
		EnergySupplyElectricity: {
			/** @constant */
			fuel: "electricity";
			/** @enum {unknown} */
			priority?: EnergySupplyElectricityPriority;
			is_export_capable?: boolean;
			ElectricBattery?: components["schemas"]["ElectricBatteryGridCharging"] | components["schemas"]["ElectricBatteryNoGridCharging"];
			diverter?: {
				StorageTank?: string;
				HeatSource: string;
				Controlmax?: string;
			};
		};
		EnergySupplyCustom: {
			/** @constant */
			fuel: "custom";
			factor?: {
				"Emissions Factor kgCO2e/kWh": number;
				"Emissions Factor kgCO2e/kWh including out-of-scope emissions": number;
				"Primary Energy Factor kWh/kWh delivered": number;
				is_export_capable: boolean;
			};
		};
		EnergySupplyOther: {
			/** @enum {unknown} */
			fuel: EnergySupplyOtherFuel;
			factor?: {
				is_export_capable: boolean;
			};
		};
		StorageTank: components["schemas"]["HotWaterTankCommon"] & {
			/** @constant */
			type: "StorageTank";
		};
		SmartHotWaterTank: components["schemas"]["HotWaterTankCommon"] & {
			/** @constant */
			type?: "SmartHotWaterTank";
			EnergySupply_pump: string;
			max_flow_rate_pump_l_per_min: number;
			power_pump_kW: number;
			temp_setpnt_max: string;
			temp_usable: number;
		};
		PointOfUse: {
			/** @constant */
			type: "PointOfUse";
			efficiency: number;
			EnergySupply: string;
		};
		CombiBoiler: {
			/** @constant */
			type: "CombiBoiler";
			HeatSourceWet: string;
			Control: string;
			/** @enum {unknown} */
			separate_DHW_tests: CombiBoilerSeparate_DHW_tests;
			rejected_energy_1: number;
			rejected_factor_3: number;
			storage_loss_factor_2: number;
			daily_HW_usage: number;
		};
		HeatBattery: {
			/** @constant */
			type: "HeatBattery";
			HeatSourceWet: string;
			/**
             * Setpoint Temp
             * @description Temperature setpoint for the heat battery hot water output (unit: ËšC)
             */
			setpoint_temp: number;
		};
		/**
         * MassDistributionClass
         * @enum {string}
         */
		MassDistributionClass: MassDistributionClass;
		"fhs_input_latest.schema": {
			PartGcompliance: boolean;
			PartO_active_cooling_required?: boolean;
			/** @description The maximum horizontal distance (in metres) across the building footprint */
			BuildingLength: number;
			/** @description The maximum horizontal distance (in metres) perpendicular to the building length */
			BuildingWidth: number;
			GroundFloorArea?: number;
			NumberOfBedrooms: number;
			NumberOfWetRooms?: number;
			/** @description A tapped room is any room with a tapping point (e.g. sink, bath, or shower) */
			NumberOfTappedRooms: number;
			/** @description A utility room is any that contains a sink or other feature or equipment that may reasonably be expected to produce significant quantities of water vapour */
			NumberOfUtilityRooms: number;
			/** @description A bathroom is any room that contains a bath or shower */
			NumberOfBathrooms: number;
			/** @description Any space containing one or more flush toilets or urinals but not a bath or shower. Multiple cubicles counts as one space as long as there is free circulation of air throughout */
			NumberOfSanitaryAccommodations: number;
			/** @description A habitable room is any that is not used solely as a kitchen, bathroom, utility, cellar or sanitary accommodation */
			NumberOfHabitableRooms: number;
			/** @enum {unknown} */
			HeatingControlType: Fhs_input_latestSchemaHeatingControlType;
			SimulationTime: Record<string, never>;
			ExternalConditions: {
				air_temperatures?: number[];
				wind_speeds?: number[];
				wind_directions?: number[];
				diffuse_horizontal_radiation?: number[];
				direct_beam_radiation?: number[];
				solar_reflectivity_of_ground?: number[];
				latitude?: number;
				longitude?: number;
				timezone?: number;
				start_day?: number;
				end_day?: number;
				time_series_step?: number;
				january_first?: number;
				daylight_savings?: string;
				leap_day_included?: boolean;
				direct_beam_conversion_needed?: boolean;
				shading_segments: {
					start360: number;
					end360: number;
					shading?: {
						/** @enum {unknown} */
						type: Fhs_input_latestSchemaExternalConditionsShading_segmentsShadingType;
						height: number;
						distance: number;
					}[];
				}[];
			};
			Appliances: Record<string, never>;
			ColdWaterSource: {
				"header tank"?: Record<string, never>;
				"mains water"?: Record<string, never>;
			} & (unknown | unknown);
			EnergySupply: {
				[key: string]: components["schemas"]["EnergySupplyGas"] | components["schemas"]["EnergySupplyElectricity"] | components["schemas"]["EnergySupplyCustom"] | components["schemas"]["EnergySupplyOther"];
			};
			OnSiteGeneration?: {
				[key: string]: {
					/** @enum {unknown} */
					type: Fhs_input_latestSchemaOnSiteGenerationType;
					peak_power: number;
					/** @enum {unknown} */
					ventilation_strategy: Fhs_input_latestSchemaOnSiteGenerationVentilation_strategy;
					pitch: number;
					orientation360: number;
					base_height: number;
					height: number;
					width: number;
					EnergySupply: string;
					shading: {
						/** @enum {unknown} */
						type: Fhs_input_latestSchemaOnSiteGenerationShadingType;
						depth: number;
						distance: number;
					}[];
					inverter_peak_power_dc: number;
					inverter_peak_power_ac: number;
					inverter_is_inside: boolean;
					/** @enum {unknown} */
					inverter_type: Fhs_input_latestSchemaOnSiteGenerationInverter_type;
				};
			};
			Control: Record<string, never>;
			HotWaterSource: {
				"hw cylinder"?: {
					/** @enum {unknown} */
					ColdWaterSource?: Fhs_input_latestSchemaHotWaterSourceHwCylinderColdWaterSource;
				} & (components["schemas"]["StorageTank"] | components["schemas"]["SmartHotWaterTank"] | components["schemas"]["PointOfUse"] | components["schemas"]["CombiBoiler"] | components["schemas"]["HeatBattery"]);
			};
			HeatSourceWet?: {
				[key: string]: {
					/** @enum {unknown} */
					type: Fhs_input_latestSchemaHeatSourceWetType;
					EnergySupply: string;
				} & (unknown & unknown & unknown & unknown);
			};
			HotWaterDemand?: {
				Shower?: {
					[key: string]: {
						/** @enum {unknown} */
						type: Fhs_input_latestSchemaHotWaterDemandShowerType;
						/** @enum {unknown} */
						ColdWaterSource: Fhs_input_latestSchemaHotWaterDemandShowerColdWaterSource;
					};
				};
				Bath?: {
					[key: string]: {
						size: number;
						/** @enum {unknown} */
						ColdWaterSource: Fhs_input_latestSchemaHotWaterDemandBathColdWaterSource;
						HotWaterSource?: string;
					};
				};
				Other?: {
					[key: string]: {
						flowrate: number;
						/** @enum {unknown} */
						ColdWaterSource: Fhs_input_latestSchemaHotWaterDemandOtherColdWaterSource;
						HotWaterSource?: string;
					};
				};
			};
			Events: Record<string, never>;
			WWHRS?: {
				[key: string]: {
					/** @constant */
					type: "WWHRS_Instantaneous";
					/** @enum {unknown} */
					ColdWaterSource: Fhs_input_latestSchemaWWHRSColdWaterSource;
					flow_rates: number[];
					/** @description Measured efficiencies for System A at the test flow rates */
					system_a_efficiencies: number[];
					/** @description Utilisation factor for System A */
					system_a_utilisation_factor?: number;
					/** @description Measured efficiencies for System B (optional, uses system_b_efficiency_factor if not provided) */
					system_b_efficiencies?: number[];
					/** @description Reduction factor for System B efficiency (default 0.81) */
					system_b_efficiency_factor?: number;
					/** @description Utilisation factor for System B (optional, defaults to system_a_utilisation_factor) */
					system_b_utilisation_factor?: number;
					/** @description Measured efficiencies for System C (optional, uses system_c_efficiency_factor if not provided) */
					system_c_efficiencies?: number[];
					/** @description Reduction factor for System C efficiency (default 0.87) */
					system_c_efficiency_factor?: number;
					/** @description Utilisation factor for System C (optional, defaults to system_a_utilisation_factor) */
					system_c_utilisation_factor?: number;
				};
			};
			SpaceHeatSystem: {
				[key: string]: {
					/** @enum {unknown} */
					type: Fhs_input_latestSchemaSpaceHeatSystemType;
				} & (unknown & unknown & unknown & unknown);
			};
			SpaceCoolSystem?: {
				[key: string]: {
					/** @enum {unknown} */
					type: Fhs_input_latestSchemaSpaceCoolSystemType;
					cooling_capacity: number;
					efficiency: number;
					frac_convective: number;
					EnergySupply: string;
					advanced_start?: number;
					temp_setback?: number;
				};
			};
			General: {
				storeys_in_building: number;
				/** @enum {unknown} */
				build_type: Fhs_input_latestSchemaGeneralBuild_type;
			};
			InfiltrationVentilation: {
				cross_vent_possible: boolean;
				/** @enum {unknown} */
				shield_class: Fhs_input_latestSchemaInfiltrationVentilationShield_class;
				/** @enum {unknown} */
				terrain_class: Fhs_input_latestSchemaInfiltrationVentilationTerrain_class;
				ventilation_zone_base_height: number;
				altitude: number;
				ach_min_static_calcs?: number;
				ach_max_static_calcs?: number;
				noise_nuisance: boolean;
				Vents: {
					[key: string]: {
						mid_height_air_flow_path: number;
						area_cm2: number;
						orientation360: number;
						pitch: number;
					};
				};
				Leaks: {
					ventilation_zone_height: number;
					/** @enum {unknown} */
					test_pressure: Fhs_input_latestSchemaInfiltrationVentilationLeaksTest_pressure;
					test_result: number;
					env_area: number;
				};
				MechanicalVentilation?: {
					[key: string]: {
						/** @enum {unknown} */
						sup_air_flw_ctrl: Fhs_input_latestSchemaInfiltrationVentilationMechanicalVentilationSup_air_flw_ctrl;
						/** @enum {unknown} */
						sup_air_temp_ctrl: Fhs_input_latestSchemaInfiltrationVentilationMechanicalVentilationSup_air_temp_ctrl;
						design_zone_cooling_covered_by_mech_vent?: number;
						design_zone_heating_covered_by_mech_vent?: number;
						/** @enum {unknown} */
						vent_type: Fhs_input_latestSchemaInfiltrationVentilationMechanicalVentilationVent_type;
						EnergySupply: string;
						design_outdoor_air_flow_rate: number;
						/**
                         * Sfp In Use Factor
                         * @description Adjustment factor to be applied to SFP to account for e.g. type of ducting. Typical range 1 - 2.5
                         * @default 1
                         */
						SFP_in_use_factor: number;
					} & (unknown & unknown & unknown);
				};
				PDUs?: Record<string, never>;
				Cowls?: Record<string, never>;
				CombustionAppliances: {
					[key: string]: {
						/** @enum {unknown} */
						supply_situation: Fhs_input_latestSchemaInfiltrationVentilationCombustionAppliancesSupply_situation;
						/** @enum {unknown} */
						exhaust_situation: Fhs_input_latestSchemaInfiltrationVentilationCombustionAppliancesExhaust_situation;
						/** @enum {unknown} */
						fuel_type: Fhs_input_latestSchemaInfiltrationVentilationCombustionAppliancesFuel_type;
					} & (unknown & unknown & unknown);
				};
			};
			Zone: {
				[key: string]: {
					SpaceHeatSystem?: string | string[];
					SpaceCoolSystem?: string | string[];
					livingroom_area: number;
					restofdwelling_area: number;
					volume: number;
					Lighting: {
						bulbs: {
							count: number;
							power: number;
							efficacy: number;
						};
					};
					BuildingElement: {
						[key: string]: ({
							/** @enum {unknown} */
							type: Fhs_input_latestSchemaZoneBuildingElementType;
							thermal_resistance_construction?: number;
							u_value?: number;
						} & (unknown & unknown & unknown & unknown & unknown)) | unknown | unknown;
					};
					ThermalBridging: {
						[key: string]: {
							/** @enum {unknown} */
							type: Fhs_input_latestSchemaZoneThermalBridgingType;
						} & (unknown & unknown);
					} | number;
				};
			};
			$defs: {
				/**
                 * MassDistributionClass
                 * @enum {string}
                 */
				MassDistributionClass: Fhs_input_latestSchema$defsMassDistributionClass;
				EnergySupplyGas: {
					/** @enum {unknown} */
					fuel: Fhs_input_latestSchema$defsEnergySupplyGasFuel;
				};
				EnergySupplyElectricity: {
					/** @constant */
					fuel: "electricity";
					/** @enum {unknown} */
					priority?: Fhs_input_latestSchema$defsEnergySupplyElectricityPriority;
					is_export_capable?: boolean;
					ElectricBattery?: components["schemas"]["ElectricBatteryGridCharging"] | components["schemas"]["ElectricBatteryNoGridCharging"];
					diverter?: {
						StorageTank?: string;
						HeatSource: string;
						Controlmax?: string;
					};
				};
				ElectricBatteryCommon: {
					capacity: number;
					charge_discharge_efficiency_round_trip: number;
					minimum_charge_rate_one_way_trip: number;
					maximum_charge_rate_one_way_trip: number;
					maximum_discharge_rate_one_way_trip: number;
					/** @enum {unknown} */
					battery_location: Fhs_input_latestSchema$defsElectricBatteryCommonBattery_location;
				};
				ElectricBatteryGridCharging: components["schemas"]["ElectricBatteryCommon"] & {
					/** @constant */
					grid_charging_possible: true;
					threshold_charges: number[];
					threshold_prices: number[];
					tariff: string;
				};
				ElectricBatteryNoGridCharging: components["schemas"]["ElectricBatteryCommon"] & {
					/** @constant */
					grid_charging_possible: false;
				};
				EnergySupplyCustom: {
					/** @constant */
					fuel: "custom";
					factor?: {
						"Emissions Factor kgCO2e/kWh": number;
						"Emissions Factor kgCO2e/kWh including out-of-scope emissions": number;
						"Primary Energy Factor kWh/kWh delivered": number;
						is_export_capable: boolean;
					};
				};
				EnergySupplyOther: {
					/** @enum {unknown} */
					fuel: Fhs_input_latestSchema$defsEnergySupplyOtherFuel;
					factor?: {
						is_export_capable: boolean;
					};
				};
				HotWaterTankCommon: {
					/** @enum {unknown} */
					type: Fhs_input_latestSchema$defsHotWaterTankCommonType;
					volume: number;
					init_temp?: number;
					daily_losses: number;
					primary_pipework?: {
						/** @enum {unknown} */
						location: Fhs_input_latestSchema$defsHotWaterTankCommonPrimary_pipeworkLocation;
						internal_diameter_mm: number;
						external_diameter_mm: number;
						length: number;
						insulation_thermal_conductivity: number;
						insulation_thickness_mm: number;
						surface_reflectivity: boolean;
						/** @enum {unknown} */
						pipe_contents: Fhs_input_latestSchema$defsHotWaterTankCommonPrimary_pipeworkPipe_contents;
					}[];
					HeatSource: {
						[key: string]: {
							/** @enum {unknown} */
							type: Fhs_input_latestSchema$defsHotWaterTankCommonHeatSourceType;
							name?: string;
							Controlmin?: string;
							Controlmax?: string;
							heater_position: number;
							thermostat_position: number;
						} & (unknown & unknown & unknown & unknown);
					};
					if?: {
						HeatSource?: {
							[key: string]: {
								/** @constant */
								type?: "HeatPump_HWOnly";
							};
						};
					};
					then?: {
						heat_exchanger_surface_area: number;
					};
				};
				StorageTank: components["schemas"]["HotWaterTankCommon"] & {
					/** @constant */
					type: "StorageTank";
				};
				SmartHotWaterTank: components["schemas"]["HotWaterTankCommon"] & {
					/** @constant */
					type?: "SmartHotWaterTank";
					EnergySupply_pump: string;
					max_flow_rate_pump_l_per_min: number;
					power_pump_kW: number;
					temp_setpnt_max: string;
					temp_usable: number;
				};
				PointOfUse: {
					/** @constant */
					type: "PointOfUse";
					efficiency: number;
					EnergySupply: string;
				};
				CombiBoiler: {
					/** @constant */
					type: "CombiBoiler";
					HeatSourceWet: string;
					Control: string;
					/** @enum {unknown} */
					separate_DHW_tests: Fhs_input_latestSchema$defsCombiBoilerSeparate_DHW_tests;
					rejected_energy_1: number;
					rejected_factor_3: number;
					storage_loss_factor_2: number;
					daily_HW_usage: number;
				};
				HeatBattery: {
					/** @constant */
					type: "HeatBattery";
					HeatSourceWet: string;
					/**
                     * Setpoint Temp
                     * @description Temperature setpoint for the heat battery hot water output (unit: ËšC)
                     */
					setpoint_temp: number;
				};
			};
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type SchemaElectricBatteryCommon = components["schemas"]["ElectricBatteryCommon"];
export type SchemaElectricBatteryGridCharging = components["schemas"]["ElectricBatteryGridCharging"];
export type SchemaElectricBatteryNoGridCharging = components["schemas"]["ElectricBatteryNoGridCharging"];
export type SchemaHotWaterTankCommon = components["schemas"]["HotWaterTankCommon"];
export type SchemaEnergySupplyGas = components["schemas"]["EnergySupplyGas"];
export type SchemaEnergySupplyElectricity = components["schemas"]["EnergySupplyElectricity"];
export type SchemaEnergySupplyCustom = components["schemas"]["EnergySupplyCustom"];
export type SchemaEnergySupplyOther = components["schemas"]["EnergySupplyOther"];
export type SchemaStorageTank = components["schemas"]["StorageTank"];
export type SchemaSmartHotWaterTank = components["schemas"]["SmartHotWaterTank"];
export type SchemaPointOfUse = components["schemas"]["PointOfUse"];
export type SchemaCombiBoiler = components["schemas"]["CombiBoiler"];
export type SchemaHeatBattery = components["schemas"]["HeatBattery"];
export type SchemaMassDistributionClass = components["schemas"]["MassDistributionClass"];
export type SchemaFhsInputLatestSchema = components["schemas"]["fhs_input_latest.schema"];
export type $defs = Record<string, never>;
export interface operations {
	FHSCompliance: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["fhs_input_latest.schema"];
			};
		};
		responses: never;
	};
}
export enum ElectricBatteryCommonBattery_location {
	inside = "inside",
	outside = "outside",
}
export enum HotWaterTankCommonType {
	SmartHotWaterTank = "SmartHotWaterTank",
	StorageTank = "StorageTank",
}
export enum HotWaterTankCommonPrimary_pipeworkLocation {
	internal = "internal",
	external = "external",
}
export enum HotWaterTankCommonPrimary_pipeworkPipe_contents {
	air = "air",
	water = "water",
	glycol25 = "glycol25",
}
export enum HotWaterTankCommonHeatSourceType {
	ImmersionHeater = "ImmersionHeater",
	SolarThermalSystem = "SolarThermalSystem",
	HeatSourceWet = "HeatSourceWet",
	HeatPump_HWOnly = "HeatPump_HWOnly",
	Boiler = "Boiler",
}
export enum EnergySupplyGasFuel {
	mains_gas = "mains_gas",
	gas = "gas",
}
export enum EnergySupplyElectricityPriority {
	ElectricBattery = "ElectricBattery",
	diverter = "diverter",
}
export enum EnergySupplyOtherFuel {
	lpg_bulk = "lpg_bulk",
	wood = "wood",
	oil = "oil",
	coal = "coal",
}
export enum CombiBoilerSeparate_DHW_tests {
	M_L = "M&L",
	M_S = "M&S",
	M_only = "M only",
	no_additional_tests = "no additional tests",
}
export enum MassDistributionClass {
	I_Mass_concentrated_at_internal_side = "I: Mass concentrated at internal side",
	E_Mass_concentrated_at_external_side = "E: Mass concentrated at external side",
	IE_Mass_divided_over_internal_and_external_side = "IE: Mass divided over internal and external side",
	D_Mass_equally_distributed = "D: Mass equally distributed",
	M_Mass_concentrated_inside = "M: Mass concentrated inside",
}
export enum Fhs_input_latestSchemaHeatingControlType {
	SeparateTempControl = "SeparateTempControl",
	SeparateTimeAndTempControl = "SeparateTimeAndTempControl",
}
export enum Fhs_input_latestSchemaExternalConditionsShading_segmentsShadingType {
	obstacle = "obstacle",
	overhang = "overhang",
}
export enum Fhs_input_latestSchemaOnSiteGenerationType {
	PhotovoltaicSystem = "PhotovoltaicSystem",
}
export enum Fhs_input_latestSchemaOnSiteGenerationVentilation_strategy {
	unventilated = "unventilated",
	moderately_ventilated = "moderately_ventilated",
	strongly_or_forced_ventilated = "strongly_or_forced_ventilated",
	rear_surface_free = "rear_surface_free",
}
export enum Fhs_input_latestSchemaOnSiteGenerationShadingType {
	reveal = "reveal",
	obstacle = "obstacle",
	overhang = "overhang",
	sidefinleft = "sidefinleft",
	sidefinright = "sidefinright",
}
export enum Fhs_input_latestSchemaOnSiteGenerationInverter_type {
	string_inverter = "string_inverter",
	optimised_inverter = "optimised_inverter",
}
export enum Fhs_input_latestSchemaHotWaterSourceHwCylinderColdWaterSource {
	header_tank = "header tank",
	mains_water = "mains water",
}
export enum Fhs_input_latestSchemaHeatSourceWetType {
	HeatPump = "HeatPump",
	Boiler = "Boiler",
	HIU = "HIU",
	HeatBattery = "HeatBattery",
}
export enum Fhs_input_latestSchemaHotWaterDemandShowerType {
	MixerShower = "MixerShower",
	InstantElecShower = "InstantElecShower",
}
export enum Fhs_input_latestSchemaHotWaterDemandShowerColdWaterSource {
	header_tank = "header tank",
	mains_water = "mains water",
}
export enum Fhs_input_latestSchemaHotWaterDemandBathColdWaterSource {
	header_tank = "header tank",
	mains_water = "mains water",
}
export enum Fhs_input_latestSchemaHotWaterDemandOtherColdWaterSource {
	header_tank = "header tank",
	mains_water = "mains water",
}
export enum Fhs_input_latestSchemaWWHRSColdWaterSource {
	header_tank = "header tank",
	mains_water = "mains water",
}
export enum Fhs_input_latestSchemaSpaceHeatSystemType {
	ElecStorageHeater = "ElecStorageHeater",
	InstantElecHeater = "InstantElecHeater",
	WetDistribution = "WetDistribution",
	WarmAir = "WarmAir",
}
export enum Fhs_input_latestSchemaSpaceCoolSystemType {
	AirConditioning = "AirConditioning",
}
export enum Fhs_input_latestSchemaGeneralBuild_type {
	flat = "flat",
	house = "house",
}
export enum Fhs_input_latestSchemaInfiltrationVentilationShield_class {
	Open = "Open",
	Normal = "Normal",
	Shielded = "Shielded",
}
export enum Fhs_input_latestSchemaInfiltrationVentilationTerrain_class {
	OpenWater = "OpenWater",
	OpenField = "OpenField",
	Suburban = "Suburban",
	Urban = "Urban",
}
export enum Fhs_input_latestSchemaInfiltrationVentilationLeaksTest_pressure {
	Standard = "Standard",
	Pulse_test_only = "Pulse test only",
}
export enum Fhs_input_latestSchemaInfiltrationVentilationMechanicalVentilationSup_air_flw_ctrl {
	ODA = "ODA",
	LOAD = "LOAD",
}
export enum Fhs_input_latestSchemaInfiltrationVentilationMechanicalVentilationSup_air_temp_ctrl {
	NO_CTRL = "NO_CTRL",
	CONST = "CONST",
	ODA_COMP = "ODA_COMP",
	LOAD_COMP = "LOAD_COMP",
}
export enum Fhs_input_latestSchemaInfiltrationVentilationMechanicalVentilationVent_type {
	Decentralised_continuous_MEV = "Decentralised continuous MEV",
	Centralised_continuous_MEV = "Centralised continuous MEV",
	MVHR = "MVHR",
	Intermittent_MEV = "Intermittent MEV",
}
export enum Fhs_input_latestSchemaInfiltrationVentilationCombustionAppliancesSupply_situation {
	room_air = "room_air",
	outside = "outside",
}
export enum Fhs_input_latestSchemaInfiltrationVentilationCombustionAppliancesExhaust_situation {
	into_room = "into_room",
	into_separate_duct = "into_separate_duct",
	into_mech_vent = "into_mech_vent",
}
export enum Fhs_input_latestSchemaInfiltrationVentilationCombustionAppliancesFuel_type {
	wood = "wood",
	gas = "gas",
	oil = "oil",
	coal = "coal",
}
export enum Fhs_input_latestSchemaZoneBuildingElementType {
	BuildingElementAdjacentConditionedSpace = "BuildingElementAdjacentConditionedSpace",
	BuildingElementAdjacentUnconditionedSpace_Simple = "BuildingElementAdjacentUnconditionedSpace_Simple",
	BuildingElementGround = "BuildingElementGround",
	BuildingElementOpaque = "BuildingElementOpaque",
	BuildingElementTransparent = "BuildingElementTransparent",
}
export enum Fhs_input_latestSchemaZoneThermalBridgingType {
	ThermalBridgeLinear = "ThermalBridgeLinear",
	ThermalBridgePoint = "ThermalBridgePoint",
}
export enum Fhs_input_latestSchema$defsMassDistributionClass {
	I_Mass_concentrated_at_internal_side = "I: Mass concentrated at internal side",
	E_Mass_concentrated_at_external_side = "E: Mass concentrated at external side",
	IE_Mass_divided_over_internal_and_external_side = "IE: Mass divided over internal and external side",
	D_Mass_equally_distributed = "D: Mass equally distributed",
	M_Mass_concentrated_inside = "M: Mass concentrated inside",
}
export enum Fhs_input_latestSchema$defsEnergySupplyGasFuel {
	mains_gas = "mains_gas",
	gas = "gas",
}
export enum Fhs_input_latestSchema$defsEnergySupplyElectricityPriority {
	ElectricBattery = "ElectricBattery",
	diverter = "diverter",
}
export enum Fhs_input_latestSchema$defsElectricBatteryCommonBattery_location {
	inside = "inside",
	outside = "outside",
}
export enum Fhs_input_latestSchema$defsEnergySupplyOtherFuel {
	lpg_bulk = "lpg_bulk",
	wood = "wood",
	oil = "oil",
	coal = "coal",
}
export enum Fhs_input_latestSchema$defsHotWaterTankCommonType {
	SmartHotWaterTank = "SmartHotWaterTank",
	StorageTank = "StorageTank",
}
export enum Fhs_input_latestSchema$defsHotWaterTankCommonPrimary_pipeworkLocation {
	internal = "internal",
	external = "external",
}
export enum Fhs_input_latestSchema$defsHotWaterTankCommonPrimary_pipeworkPipe_contents {
	air = "air",
	water = "water",
	glycol25 = "glycol25",
}
export enum Fhs_input_latestSchema$defsHotWaterTankCommonHeatSourceType {
	ImmersionHeater = "ImmersionHeater",
	SolarThermalSystem = "SolarThermalSystem",
	HeatSourceWet = "HeatSourceWet",
	HeatPump_HWOnly = "HeatPump_HWOnly",
	Boiler = "Boiler",
}
export enum Fhs_input_latestSchema$defsCombiBoilerSeparate_DHW_tests {
	M_L = "M&L",
	M_S = "M&S",
	M_only = "M only",
	no_additional_tests = "no additional tests",
}
export enum ApiPaths {
	FHSCompliance = "/beta/future-homes-standard-compliance",
}
