/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	"/beta/future-homes-standard-compliance": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
         * Check Future Homes Standard (FHS) compliance
         * @description Check compliance with the Future Homes Standard (FHS) based on the energy performance of a building calculated using the Home Energy Model (HEM).
         */
		post: operations["FHSCompliance"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		ElectricBatteryCommon: {
			capacity: number;
			charge_discharge_efficiency_round_trip: number;
			minimum_charge_rate_one_way_trip: number;
			maximum_charge_rate_one_way_trip: number;
			maximum_discharge_rate_one_way_trip: number;
			/** @enum {unknown} */
			battery_location: "inside" | "outside";
		};
		ElectricBatteryGridCharging: components["schemas"]["ElectricBatteryCommon"] & {
			/** @constant */
			grid_charging_possible: true;
			threshold_charges: number[];
			threshold_prices: number[];
			tariff: string;
		};
		ElectricBatteryNoGridCharging: components["schemas"]["ElectricBatteryCommon"] & {
			/** @constant */
			grid_charging_possible: false;
		};
		HotWaterTankHeatSourceCommon: {
			/** @enum {unknown} */
			type: "ImmersionHeater" | "SolarThermalSystem" | "HeatSourceWet" | "HeatPump_HWOnly" | "Boiler";
			name?: string;
			Controlmin?: string;
			Controlmax?: string;
			heater_position: number;
			thermostat_position: number;
		};
		/** @description A possible heat source for a hot water tank */
		ImmersionHeater: components["schemas"]["HotWaterTankHeatSourceCommon"] & {
			/** @constant */
			type: "ImmersionHeater";
			power: number;
			EnergySupply: string;
		};
		/** @description A possible heat source for a hot water tank */
		SolarThermalSystem: components["schemas"]["HotWaterTankHeatSourceCommon"] & {
			/** @constant */
			type: "SolarThermalSystem";
			/** @enum {unknown} */
			solar_loc: "OUT" | "NHS" | "HS";
			area_module: number;
			modules: number;
			peak_collector_efficiency: number;
			incidence_angle_modifier: number;
			first_order_hlc: number;
			second_order_hlc: number;
			collector_mass_flow_rate: number;
			power_pump: number;
			power_pump_control: number;
			EnergySupply: string;
			tilt: number;
			orientation: number;
			solar_loop_piping_hlc: number;
		};
		/** @description A possible heat source for a hot water tank */
		HeatSourceWet: components["schemas"]["HotWaterTankHeatSourceCommon"] & {
			/** @constant */
			type: "HeatSourceWet";
			EnergySupply: string;
			temp_flow_limit_upper?: number;
		};
		/** @description A possible heat source for a hot water tank */
		HeatPump_HWOnly: components["schemas"]["HotWaterTankHeatSourceCommon"] & {
			/** @constant */
			type: "HeatPump_HWOnly";
			EnergySupply: string;
			power_max: number;
			tank_volume_declared: number;
			heat_exchanger_surface_area_declared: number;
			daily_losses_declared: number;
			in_use_factor_mismatch: number;
			test_data: Record<string, never>;
		};
		/** @description A possible heat source for a hot water tank */
		Boiler: components["schemas"]["HotWaterTankHeatSourceCommon"] & {
			/** @constant */
			type: "Boiler";
		};
		HotWaterTankCommon: {
			/** @enum {unknown} */
			type: "SmartHotWaterTank" | "StorageTank";
			volume: number;
			init_temp?: number;
			daily_losses: number;
			primary_pipework?: {
				/** @enum {unknown} */
				location: "internal" | "external";
				internal_diameter_mm: number;
				external_diameter_mm: number;
				length: number;
				insulation_thermal_conductivity: number;
				insulation_thickness_mm: number;
				surface_reflectivity: boolean;
				/** @enum {unknown} */
				pipe_contents: "air" | "water" | "glycol25";
			}[];
			HeatSource: {
				[key: string]: components["schemas"]["ImmersionHeater"] | components["schemas"]["SolarThermalSystem"] | components["schemas"]["HeatSourceWet"] | components["schemas"]["HeatPump_HWOnly"] | components["schemas"]["Boiler"];
			};
			/** @description A heat_exchanger_surface_area is required when there is a HeatPump_HWOnly HeatSource */
			heat_exchanger_surface_area?: number;
		};
		HeatSourceWetCommon: {
			/** @enum {unknown} */
			type: "HeatPump" | "Boiler" | "HIU" | "HeatBattery";
			EnergySupply: string;
		};
		PCMBattery: {
			/** @constant */
			type: "HeatBattery";
			/** @constant */
			battery_type: "pcm";
			electricity_circ_pump: number;
			electricity_standby: number;
			rated_charge_power: number;
			max_rated_losses: number;
			ControlCharge: string;
			number_of_units: number;
			simultaneous_charging_and_discharging: boolean;
			heat_storage_zone_material_kJ_per_K_above_Phase_transition: number;
			heat_storage_zone_material_kJ_per_K_below_Phase_transition: number;
			heat_storage_zone_material_kJ_per_K_during_Phase_transition: number;
			phase_transition_temperature_upper: number;
			phase_transition_temperature_lower: number;
			velocity_in_HEX_tube_at_1_l_per_min_m_per_s: number;
			A: number;
			B: number;
			heat_exchanger_surface_area_m2: number;
			capillary_diameter_m: number;
			max_temperature: number;
			flow_rate_l_per_min: number;
			/**
             * Temp Init
             * @description Initial temperature of the PCM heat battery at the start of simulation (unit: ˚C)
             */
			temp_init: number;
		};
		DryCoreBattery: {
			/** @constant */
			type: "HeatBattery";
			/** @constant */
			battery_type: "dry_core";
			electricity_circ_pump: number;
			electricity_standby: number;
			/** @description Charging power (kW) */
			pwr_in: number;
			/** @description Rated instantaneous power output (kW) */
			rated_power_instant: number;
			/** @description Heat storage capacity (kWh) */
			heat_storage_capacity: number;
			ControlCharge: string;
			EnergySupply: string;
			number_of_units: number;
			/** @description Lookup table for minimum output based on charge level */
			dry_core_min_output: number[][];
			/** @description Lookup table for maximum output based on charge level */
			dry_core_max_output: number[][];
			/** @description Fan power (W) */
			fan_pwr: number;
			/** @description Water setpoint temperature (°C) */
			setpoint_temp_water: number;
			/**
             * State Of Charge Init
             * @description State of charge at initialisation of dry core heat storage (ratio)
             */
			state_of_charge_init: number;
		};
		EnergySupplyGas: {
			/** @enum {unknown} */
			fuel: "mains_gas" | "gas";
		};
		EnergySupplyElectricity: {
			/** @constant */
			fuel: "electricity";
			/** @enum {unknown} */
			priority?: "ElectricBattery" | "diverter";
			is_export_capable?: boolean;
			ElectricBattery?: components["schemas"]["ElectricBatteryGridCharging"] | components["schemas"]["ElectricBatteryNoGridCharging"];
			diverter?: {
				StorageTank?: string;
				HeatSource: string;
				Controlmax?: string;
			};
		};
		EnergySupplyCustom: {
			/** @constant */
			fuel: "custom";
			factor?: {
				"Emissions Factor kgCO2e/kWh": number;
				"Emissions Factor kgCO2e/kWh including out-of-scope emissions": number;
				"Primary Energy Factor kWh/kWh delivered": number;
				is_export_capable: boolean;
			};
		};
		EnergySupplyOther: {
			/** @enum {unknown} */
			fuel: "lpg_bulk" | "wood" | "oil" | "coal";
			factor?: {
				is_export_capable: boolean;
			};
		};
		/** @description A possible hot water source */
		StorageTank: components["schemas"]["HotWaterTankCommon"] & {
			/** @constant */
			type: "StorageTank";
		};
		/** @description A possible hot water source */
		SmartHotWaterTank: components["schemas"]["HotWaterTankCommon"] & {
			/** @constant */
			type: "SmartHotWaterTank";
			EnergySupply_pump: string;
			max_flow_rate_pump_l_per_min: number;
			power_pump_kW: number;
			temp_setpnt_max: string;
			temp_usable: number;
		};
		/** @description A possible hot water source */
		PointOfUse: {
			/** @constant */
			type: "PointOfUse";
			efficiency: number;
			EnergySupply: string;
		};
		/** @description A possible hot water source */
		CombiBoiler: {
			/** @constant */
			type: "CombiBoiler";
			HeatSourceWet: string;
			Control: string;
			/** @enum {unknown} */
			separate_DHW_tests: "M&L" | "M&S" | "M only" | "no additional tests";
			rejected_energy_1: number;
			rejected_factor_3: number;
			storage_loss_factor_2: number;
			daily_HW_usage: number;
		};
		/** @description A possible hot water source */
		HeatBattery: {
			/** @constant */
			type: "HeatBattery";
			HeatSourceWet: string;
			/**
             * Setpoint Temp
             * @description Temperature setpoint for the heat battery hot water output (unit: ˚C)
             */
			setpoint_temp: number;
		};
		/** @description A possible wet heat source */
		HeatSourceWetHeatPump: components["schemas"]["HeatSourceWetCommon"] & {
			/** @constant */
			type: "HeatPump";
			/** @enum {unknown} */
			source_type: "Ground" | "OutsideAir" | "ExhaustAirMEV" | "ExhaustAirMVHR" | "ExhaustAirMixed" | "WaterGround" | "WaterSurface";
			/** @enum {unknown} */
			sink_type: "Air" | "Water";
			/** @enum {unknown} */
			backup_ctrl_type: "None" | "TopUp" | "Substitute";
			modulating_control: boolean;
			min_modulation_rate_35: number;
			min_modulation_rate_55: number;
			temp_return_feed_max: number;
			temp_lower_operating_limit: number;
			min_temp_diff_flow_return_for_hp_to_operate: number;
			var_flow_temp_ctrl_during_test: boolean;
			power_heating_circ_pump?: number;
			power_source_circ_pump: number;
			power_standby: number;
			power_crankcase_heater: number;
			power_off: number;
			power_max_backup: number;
			BufferTank?: {
				daily_losses: number;
				pump_fixed_flow_rate: number;
				pump_power_at_flow_rate: number;
				volume: number;
			};
			time_delay_backup: number;
			power_heating_warm_air_fan?: number;
			time_constant_onoff_operation: number;
			test_data_EN14825: {
				/** @enum {unknown} */
				test_letter: "A" | "B" | "C" | "D" | "F";
				capacity: number;
				cop: number;
				design_flow_temp: number;
				temp_outlet: number;
				temp_source: number;
				temp_test: number;
			}[];
		};
		/** @description A possible wet heat source */
		HeatSourceWetBoiler: components["schemas"]["HeatSourceWetCommon"] & {
			/** @constant */
			type: "Boiler";
			rated_power: number;
			efficiency_full_load: number;
			efficiency_partload?: number;
			/** @enum {unknown} */
			boiler_location: "internal" | "external";
			modulation_load: number;
			electricity_circ_pump: number;
			electricity_part_load: number;
			electricity_full_load: number;
			electricity_standby: number;
		};
		/** @description A possible wet heat source */
		HeatSourceWetHeatBattery: components["schemas"]["HeatSourceWetCommon"] & (components["schemas"]["PCMBattery"] | components["schemas"]["DryCoreBattery"]);
		/** @description A possible wet heat source */
		HeatSourceWetHIU: components["schemas"]["HeatSourceWetCommon"] & {
			/** @constant */
			type: "HIU";
			HIU_daily_loss: number;
			power_max: number;
			building_level_distribution_losses: number;
		};
		/**
         * MassDistributionClass
         * @enum {string}
         */
		MassDistributionClass: "I: Mass concentrated at internal side" | "E: Mass concentrated at external side" | "IE: Mass divided over internal and external side" | "D: Mass equally distributed" | "M: Mass concentrated inside";
		"fhs_input_latest.schema": {
			PartGcompliance: boolean;
			PartO_active_cooling_required?: boolean;
			/** @description The maximum horizontal distance (in metres) across the building footprint */
			BuildingLength: number;
			/** @description The maximum horizontal distance (in metres) perpendicular to the building length */
			BuildingWidth: number;
			GroundFloorArea?: number;
			NumberOfBedrooms: number;
			NumberOfWetRooms?: number;
			/** @description A tapped room is any room with a tapping point (e.g. sink, bath, or shower) */
			NumberOfTappedRooms: number;
			/** @description A utility room is any that contains a sink or other feature or equipment that may reasonably be expected to produce significant quantities of water vapour */
			NumberOfUtilityRooms: number;
			/** @description A bathroom is any room that contains a bath or shower */
			NumberOfBathrooms: number;
			/** @description Any space containing one or more flush toilets or urinals but not a bath or shower. Multiple cubicles counts as one space as long as there is free circulation of air throughout */
			NumberOfSanitaryAccommodations: number;
			/** @description A habitable room is any that is not used solely as a kitchen, bathroom, utility, cellar or sanitary accommodation */
			NumberOfHabitableRooms: number;
			/** @enum {unknown} */
			HeatingControlType: "SeparateTempControl" | "SeparateTimeAndTempControl";
			SimulationTime: Record<string, never>;
			ExternalConditions: {
				air_temperatures?: number[];
				wind_speeds?: number[];
				wind_directions?: number[];
				diffuse_horizontal_radiation?: number[];
				direct_beam_radiation?: number[];
				solar_reflectivity_of_ground?: number[];
				latitude?: number;
				longitude?: number;
				timezone?: number;
				start_day?: number;
				end_day?: number;
				time_series_step?: number;
				january_first?: number;
				daylight_savings?: string;
				leap_day_included?: boolean;
				direct_beam_conversion_needed?: boolean;
				shading_segments: {
					start360: number;
					end360: number;
					shading?: {
						/** @enum {unknown} */
						type: "obstacle" | "overhang";
						height: number;
						distance: number;
					}[];
				}[];
			};
			Appliances: Record<string, never>;
			ColdWaterSource: {
				"header tank"?: Record<string, never>;
				"mains water"?: Record<string, never>;
			} & (unknown | unknown);
			EnergySupply: {
				[key: string]: components["schemas"]["EnergySupplyGas"] | components["schemas"]["EnergySupplyElectricity"] | components["schemas"]["EnergySupplyCustom"] | components["schemas"]["EnergySupplyOther"];
			};
			OnSiteGeneration?: {
				[key: string]: {
					/** @enum {unknown} */
					type: "PhotovoltaicSystem";
					peak_power: number;
					/** @enum {unknown} */
					ventilation_strategy: "unventilated" | "moderately_ventilated" | "strongly_or_forced_ventilated" | "rear_surface_free";
					pitch: number;
					orientation360: number;
					base_height: number;
					height: number;
					width: number;
					EnergySupply: string;
					shading: {
						/** @enum {unknown} */
						type: "reveal" | "obstacle" | "overhang" | "sidefinleft" | "sidefinright";
						depth: number;
						distance: number;
					}[];
					inverter_peak_power_dc: number;
					inverter_peak_power_ac: number;
					inverter_is_inside: boolean;
					/** @enum {unknown} */
					inverter_type: "string_inverter" | "optimised_inverter";
				};
			};
			Control: Record<string, never>;
			HotWaterSource: {
				"hw cylinder"?: {
					/** @enum {unknown} */
					ColdWaterSource?: "header tank" | "mains water";
				} & (components["schemas"]["StorageTank"] | components["schemas"]["SmartHotWaterTank"] | components["schemas"]["PointOfUse"] | components["schemas"]["CombiBoiler"] | components["schemas"]["HeatBattery"]);
			};
			HeatSourceWet?: {
				[key: string]: components["schemas"]["HeatSourceWetHeatPump"] | components["schemas"]["HeatSourceWetBoiler"] | components["schemas"]["HeatSourceWetHeatBattery"] | components["schemas"]["HeatSourceWetHIU"];
			};
			HotWaterDemand?: {
				Shower?: {
					[key: string]: {
						/** @enum {unknown} */
						type: "MixerShower" | "InstantElecShower";
						/** @enum {unknown} */
						ColdWaterSource: "header tank" | "mains water";
					};
				};
				Bath?: {
					[key: string]: {
						size: number;
						/** @enum {unknown} */
						ColdWaterSource: "header tank" | "mains water";
						HotWaterSource?: string;
					};
				};
				Other?: {
					[key: string]: {
						flowrate: number;
						/** @enum {unknown} */
						ColdWaterSource: "header tank" | "mains water";
						HotWaterSource?: string;
					};
				};
			};
			Events: Record<string, never>;
			WWHRS?: {
				[key: string]: {
					/** @constant */
					type: "WWHRS_Instantaneous";
					/** @enum {unknown} */
					ColdWaterSource: "header tank" | "mains water";
					flow_rates: number[];
					/** @description Measured efficiencies for System A at the test flow rates */
					system_a_efficiencies: number[];
					/** @description Utilisation factor for System A */
					system_a_utilisation_factor?: number;
					/** @description Measured efficiencies for System B (optional, uses system_b_efficiency_factor if not provided) */
					system_b_efficiencies?: number[];
					/** @description Reduction factor for System B efficiency (default 0.81) */
					system_b_efficiency_factor?: number;
					/** @description Utilisation factor for System B (optional, defaults to system_a_utilisation_factor) */
					system_b_utilisation_factor?: number;
					/** @description Measured efficiencies for System C (optional, uses system_c_efficiency_factor if not provided) */
					system_c_efficiencies?: number[];
					/** @description Reduction factor for System C efficiency (default 0.87) */
					system_c_efficiency_factor?: number;
					/** @description Utilisation factor for System C (optional, defaults to system_a_utilisation_factor) */
					system_c_utilisation_factor?: number;
				};
			};
			SpaceHeatSystem: {
				[key: string]: {
					/** @enum {unknown} */
					type: "ElecStorageHeater" | "InstantElecHeater" | "WetDistribution" | "WarmAir";
				} & (unknown & unknown & unknown & unknown);
			};
			SpaceCoolSystem?: {
				[key: string]: {
					/** @enum {unknown} */
					type: "AirConditioning";
					cooling_capacity: number;
					efficiency: number;
					frac_convective: number;
					EnergySupply: string;
					advanced_start?: number;
					temp_setback?: number;
				};
			};
			General: {
				storeys_in_building: number;
				/** @enum {unknown} */
				build_type: "flat" | "house";
			};
			InfiltrationVentilation: {
				cross_vent_possible: boolean;
				/** @enum {unknown} */
				shield_class: "Open" | "Normal" | "Shielded";
				/** @enum {unknown} */
				terrain_class: "OpenWater" | "OpenField" | "Suburban" | "Urban";
				ventilation_zone_base_height: number;
				altitude: number;
				ach_min_static_calcs?: number;
				ach_max_static_calcs?: number;
				noise_nuisance: boolean;
				Vents: {
					[key: string]: {
						mid_height_air_flow_path: number;
						area_cm2: number;
						orientation360: number;
						pitch: number;
					};
				};
				Leaks: {
					ventilation_zone_height: number;
					/** @enum {unknown} */
					test_pressure: "Standard" | "Pulse test only";
					test_result: number;
					env_area: number;
				};
				MechanicalVentilation?: {
					[key: string]: {
						/** @enum {unknown} */
						sup_air_flw_ctrl: "ODA" | "LOAD";
						/** @enum {unknown} */
						sup_air_temp_ctrl: "NO_CTRL" | "CONST" | "ODA_COMP" | "LOAD_COMP";
						design_zone_cooling_covered_by_mech_vent?: number;
						design_zone_heating_covered_by_mech_vent?: number;
						/** @enum {unknown} */
						vent_type: "Decentralised continuous MEV" | "Centralised continuous MEV" | "MVHR" | "Intermittent MEV";
						EnergySupply: string;
						design_outdoor_air_flow_rate: number;
						/**
                         * Sfp In Use Factor
                         * @description Adjustment factor to be applied to SFP to account for e.g. type of ducting. Typical range 1 - 2.5
                         * @default 1
                         */
						SFP_in_use_factor?: number;
					} & (unknown & unknown & unknown);
				};
				PDUs?: Record<string, never>;
				Cowls?: Record<string, never>;
				CombustionAppliances: {
					[key: string]: {
						/** @enum {unknown} */
						supply_situation: "room_air" | "outside";
						/** @enum {unknown} */
						exhaust_situation: "into_room" | "into_separate_duct" | "into_mech_vent";
						/** @enum {unknown} */
						fuel_type: "wood" | "gas" | "oil" | "coal";
					} & (unknown & unknown & unknown);
				};
			};
			Zone: {
				[key: string]: {
					SpaceHeatSystem?: string | string[];
					SpaceCoolSystem?: string | string[];
					livingroom_area: number;
					restofdwelling_area: number;
					volume: number;
					Lighting: {
						bulbs: {
							count: number;
							power: number;
							efficacy: number;
						};
					};
					BuildingElement: {
						[key: string]: ({
							/** @enum {unknown} */
							type: "BuildingElementAdjacentConditionedSpace" | "BuildingElementAdjacentUnconditionedSpace_Simple" | "BuildingElementGround" | "BuildingElementOpaque" | "BuildingElementTransparent";
							thermal_resistance_construction?: number;
							u_value?: number;
						} & (unknown & unknown & unknown & unknown & unknown)) | unknown | unknown;
					};
					ThermalBridging: {
						[key: string]: {
							/** @enum {unknown} */
							type: "ThermalBridgeLinear" | "ThermalBridgePoint";
						} & (unknown & unknown);
					} | number;
				};
			};
			$defs: {
				/**
                 * MassDistributionClass
                 * @enum {string}
                 */
				MassDistributionClass: "I: Mass concentrated at internal side" | "E: Mass concentrated at external side" | "IE: Mass divided over internal and external side" | "D: Mass equally distributed" | "M: Mass concentrated inside";
				EnergySupplyGas: {
					/** @enum {unknown} */
					fuel: "mains_gas" | "gas";
				};
				EnergySupplyElectricity: {
					/** @constant */
					fuel: "electricity";
					/** @enum {unknown} */
					priority?: "ElectricBattery" | "diverter";
					is_export_capable?: boolean;
					ElectricBattery?: components["schemas"]["ElectricBatteryGridCharging"] | components["schemas"]["ElectricBatteryNoGridCharging"];
					diverter?: {
						StorageTank?: string;
						HeatSource: string;
						Controlmax?: string;
					};
				};
				ElectricBatteryCommon: {
					capacity: number;
					charge_discharge_efficiency_round_trip: number;
					minimum_charge_rate_one_way_trip: number;
					maximum_charge_rate_one_way_trip: number;
					maximum_discharge_rate_one_way_trip: number;
					/** @enum {unknown} */
					battery_location: "inside" | "outside";
				};
				ElectricBatteryGridCharging: components["schemas"]["ElectricBatteryCommon"] & {
					/** @constant */
					grid_charging_possible: true;
					threshold_charges: number[];
					threshold_prices: number[];
					tariff: string;
				};
				ElectricBatteryNoGridCharging: components["schemas"]["ElectricBatteryCommon"] & {
					/** @constant */
					grid_charging_possible: false;
				};
				EnergySupplyCustom: {
					/** @constant */
					fuel: "custom";
					factor?: {
						"Emissions Factor kgCO2e/kWh": number;
						"Emissions Factor kgCO2e/kWh including out-of-scope emissions": number;
						"Primary Energy Factor kWh/kWh delivered": number;
						is_export_capable: boolean;
					};
				};
				EnergySupplyOther: {
					/** @enum {unknown} */
					fuel: "lpg_bulk" | "wood" | "oil" | "coal";
					factor?: {
						is_export_capable: boolean;
					};
				};
				HotWaterTankCommon: {
					/** @enum {unknown} */
					type: "SmartHotWaterTank" | "StorageTank";
					volume: number;
					init_temp?: number;
					daily_losses: number;
					primary_pipework?: {
						/** @enum {unknown} */
						location: "internal" | "external";
						internal_diameter_mm: number;
						external_diameter_mm: number;
						length: number;
						insulation_thermal_conductivity: number;
						insulation_thickness_mm: number;
						surface_reflectivity: boolean;
						/** @enum {unknown} */
						pipe_contents: "air" | "water" | "glycol25";
					}[];
					HeatSource: {
						[key: string]: components["schemas"]["ImmersionHeater"] | components["schemas"]["SolarThermalSystem"] | components["schemas"]["HeatSourceWet"] | components["schemas"]["HeatPump_HWOnly"] | components["schemas"]["Boiler"];
					};
					/** @description A heat_exchanger_surface_area is required when there is a HeatPump_HWOnly HeatSource */
					heat_exchanger_surface_area?: number;
				};
				HotWaterTankHeatSourceCommon: {
					/** @enum {unknown} */
					type: "ImmersionHeater" | "SolarThermalSystem" | "HeatSourceWet" | "HeatPump_HWOnly" | "Boiler";
					name?: string;
					Controlmin?: string;
					Controlmax?: string;
					heater_position: number;
					thermostat_position: number;
				};
				/** @description A possible heat source for a hot water tank */
				ImmersionHeater: components["schemas"]["HotWaterTankHeatSourceCommon"] & {
					/** @constant */
					type: "ImmersionHeater";
					power: number;
					EnergySupply: string;
				};
				/** @description A possible heat source for a hot water tank */
				SolarThermalSystem: components["schemas"]["HotWaterTankHeatSourceCommon"] & {
					/** @constant */
					type: "SolarThermalSystem";
					/** @enum {unknown} */
					solar_loc: "OUT" | "NHS" | "HS";
					area_module: number;
					modules: number;
					peak_collector_efficiency: number;
					incidence_angle_modifier: number;
					first_order_hlc: number;
					second_order_hlc: number;
					collector_mass_flow_rate: number;
					power_pump: number;
					power_pump_control: number;
					EnergySupply: string;
					tilt: number;
					orientation: number;
					solar_loop_piping_hlc: number;
				};
				/** @description A possible heat source for a hot water tank */
				HeatSourceWet: components["schemas"]["HotWaterTankHeatSourceCommon"] & {
					/** @constant */
					type: "HeatSourceWet";
					EnergySupply: string;
					temp_flow_limit_upper?: number;
				};
				/** @description A possible heat source for a hot water tank */
				HeatPump_HWOnly: components["schemas"]["HotWaterTankHeatSourceCommon"] & {
					/** @constant */
					type: "HeatPump_HWOnly";
					EnergySupply: string;
					power_max: number;
					tank_volume_declared: number;
					heat_exchanger_surface_area_declared: number;
					daily_losses_declared: number;
					in_use_factor_mismatch: number;
					test_data: Record<string, never>;
				};
				/** @description A possible heat source for a hot water tank */
				Boiler: components["schemas"]["HotWaterTankHeatSourceCommon"] & {
					/** @constant */
					type: "Boiler";
				};
				/** @description A possible hot water source */
				StorageTank: components["schemas"]["HotWaterTankCommon"] & {
					/** @constant */
					type: "StorageTank";
				};
				/** @description A possible hot water source */
				SmartHotWaterTank: components["schemas"]["HotWaterTankCommon"] & {
					/** @constant */
					type: "SmartHotWaterTank";
					EnergySupply_pump: string;
					max_flow_rate_pump_l_per_min: number;
					power_pump_kW: number;
					temp_setpnt_max: string;
					temp_usable: number;
				};
				/** @description A possible hot water source */
				PointOfUse: {
					/** @constant */
					type: "PointOfUse";
					efficiency: number;
					EnergySupply: string;
				};
				/** @description A possible hot water source */
				CombiBoiler: {
					/** @constant */
					type: "CombiBoiler";
					HeatSourceWet: string;
					Control: string;
					/** @enum {unknown} */
					separate_DHW_tests: "M&L" | "M&S" | "M only" | "no additional tests";
					rejected_energy_1: number;
					rejected_factor_3: number;
					storage_loss_factor_2: number;
					daily_HW_usage: number;
				};
				/** @description A possible hot water source */
				HeatBattery: {
					/** @constant */
					type: "HeatBattery";
					HeatSourceWet: string;
					/**
                     * Setpoint Temp
                     * @description Temperature setpoint for the heat battery hot water output (unit: ˚C)
                     */
					setpoint_temp: number;
				};
				HeatSourceWetCommon: {
					/** @enum {unknown} */
					type: "HeatPump" | "Boiler" | "HIU" | "HeatBattery";
					EnergySupply: string;
				};
				/** @description A possible wet heat source */
				HeatSourceWetHeatPump: components["schemas"]["HeatSourceWetCommon"] & {
					/** @constant */
					type: "HeatPump";
					/** @enum {unknown} */
					source_type: "Ground" | "OutsideAir" | "ExhaustAirMEV" | "ExhaustAirMVHR" | "ExhaustAirMixed" | "WaterGround" | "WaterSurface";
					/** @enum {unknown} */
					sink_type: "Air" | "Water";
					/** @enum {unknown} */
					backup_ctrl_type: "None" | "TopUp" | "Substitute";
					modulating_control: boolean;
					min_modulation_rate_35: number;
					min_modulation_rate_55: number;
					temp_return_feed_max: number;
					temp_lower_operating_limit: number;
					min_temp_diff_flow_return_for_hp_to_operate: number;
					var_flow_temp_ctrl_during_test: boolean;
					power_heating_circ_pump?: number;
					power_source_circ_pump: number;
					power_standby: number;
					power_crankcase_heater: number;
					power_off: number;
					power_max_backup: number;
					BufferTank?: {
						daily_losses: number;
						pump_fixed_flow_rate: number;
						pump_power_at_flow_rate: number;
						volume: number;
					};
					time_delay_backup: number;
					power_heating_warm_air_fan?: number;
					time_constant_onoff_operation: number;
					test_data_EN14825: {
						/** @enum {unknown} */
						test_letter: "A" | "B" | "C" | "D" | "F";
						capacity: number;
						cop: number;
						design_flow_temp: number;
						temp_outlet: number;
						temp_source: number;
						temp_test: number;
					}[];
				};
				/** @description A possible wet heat source */
				HeatSourceWetBoiler: components["schemas"]["HeatSourceWetCommon"] & {
					/** @constant */
					type: "Boiler";
					rated_power: number;
					efficiency_full_load: number;
					efficiency_partload?: number;
					/** @enum {unknown} */
					boiler_location: "internal" | "external";
					modulation_load: number;
					electricity_circ_pump: number;
					electricity_part_load: number;
					electricity_full_load: number;
					electricity_standby: number;
				};
				/** @description A possible wet heat source */
				HeatSourceWetHeatBattery: components["schemas"]["HeatSourceWetCommon"] & (components["schemas"]["PCMBattery"] | components["schemas"]["DryCoreBattery"]);
				PCMBattery: {
					/** @constant */
					type: "HeatBattery";
					/** @constant */
					battery_type: "pcm";
					electricity_circ_pump: number;
					electricity_standby: number;
					rated_charge_power: number;
					max_rated_losses: number;
					ControlCharge: string;
					number_of_units: number;
					simultaneous_charging_and_discharging: boolean;
					heat_storage_zone_material_kJ_per_K_above_Phase_transition: number;
					heat_storage_zone_material_kJ_per_K_below_Phase_transition: number;
					heat_storage_zone_material_kJ_per_K_during_Phase_transition: number;
					phase_transition_temperature_upper: number;
					phase_transition_temperature_lower: number;
					velocity_in_HEX_tube_at_1_l_per_min_m_per_s: number;
					A: number;
					B: number;
					heat_exchanger_surface_area_m2: number;
					capillary_diameter_m: number;
					max_temperature: number;
					flow_rate_l_per_min: number;
					/**
                     * Temp Init
                     * @description Initial temperature of the PCM heat battery at the start of simulation (unit: ˚C)
                     */
					temp_init: number;
				};
				DryCoreBattery: {
					/** @constant */
					type: "HeatBattery";
					/** @constant */
					battery_type: "dry_core";
					electricity_circ_pump: number;
					electricity_standby: number;
					/** @description Charging power (kW) */
					pwr_in: number;
					/** @description Rated instantaneous power output (kW) */
					rated_power_instant: number;
					/** @description Heat storage capacity (kWh) */
					heat_storage_capacity: number;
					ControlCharge: string;
					EnergySupply: string;
					number_of_units: number;
					/** @description Lookup table for minimum output based on charge level */
					dry_core_min_output: number[][];
					/** @description Lookup table for maximum output based on charge level */
					dry_core_max_output: number[][];
					/** @description Fan power (W) */
					fan_pwr: number;
					/** @description Water setpoint temperature (°C) */
					setpoint_temp_water: number;
					/**
                     * State Of Charge Init
                     * @description State of charge at initialisation of dry core heat storage (ratio)
                     */
					state_of_charge_init: number;
				};
				/** @description A possible wet heat source */
				HeatSourceWetHIU: components["schemas"]["HeatSourceWetCommon"] & {
					/** @constant */
					type: "HIU";
					HIU_daily_loss: number;
					power_max: number;
					building_level_distribution_losses: number;
				};
			};
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type SchemaElectricBatteryCommon = components["schemas"]["ElectricBatteryCommon"];
export type SchemaElectricBatteryGridCharging = components["schemas"]["ElectricBatteryGridCharging"];
export type SchemaElectricBatteryNoGridCharging = components["schemas"]["ElectricBatteryNoGridCharging"];
export type SchemaHotWaterTankHeatSourceCommon = components["schemas"]["HotWaterTankHeatSourceCommon"];
export type SchemaImmersionHeater = components["schemas"]["ImmersionHeater"];
export type SchemaSolarThermalSystem = components["schemas"]["SolarThermalSystem"];
export type SchemaHeatSourceWet = components["schemas"]["HeatSourceWet"];
export type SchemaHeatPumpHwOnly = components["schemas"]["HeatPump_HWOnly"];
export type SchemaBoiler = components["schemas"]["Boiler"];
export type SchemaHotWaterTankCommon = components["schemas"]["HotWaterTankCommon"];
export type SchemaHeatSourceWetCommon = components["schemas"]["HeatSourceWetCommon"];
export type SchemaPcmBattery = components["schemas"]["PCMBattery"];
export type SchemaDryCoreBattery = components["schemas"]["DryCoreBattery"];
export type SchemaEnergySupplyGas = components["schemas"]["EnergySupplyGas"];
export type SchemaEnergySupplyElectricity = components["schemas"]["EnergySupplyElectricity"];
export type SchemaEnergySupplyCustom = components["schemas"]["EnergySupplyCustom"];
export type SchemaEnergySupplyOther = components["schemas"]["EnergySupplyOther"];
export type SchemaStorageTank = components["schemas"]["StorageTank"];
export type SchemaSmartHotWaterTank = components["schemas"]["SmartHotWaterTank"];
export type SchemaPointOfUse = components["schemas"]["PointOfUse"];
export type SchemaCombiBoiler = components["schemas"]["CombiBoiler"];
export type SchemaHeatBattery = components["schemas"]["HeatBattery"];
export type SchemaHeatSourceWetHeatPump = components["schemas"]["HeatSourceWetHeatPump"];
export type SchemaHeatSourceWetBoiler = components["schemas"]["HeatSourceWetBoiler"];
export type SchemaHeatSourceWetHeatBattery = components["schemas"]["HeatSourceWetHeatBattery"];
export type SchemaHeatSourceWetHiu = components["schemas"]["HeatSourceWetHIU"];
export type SchemaMassDistributionClass = components["schemas"]["MassDistributionClass"];
export type SchemaFhsInputLatestSchema = components["schemas"]["fhs_input_latest.schema"];
export type $defs = Record<string, never>;
export interface operations {
	FHSCompliance: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["fhs_input_latest.schema"];
			};
		};
		responses: never;
	};
}
export enum ApiPaths {
	FHSCompliance = "/beta/future-homes-standard-compliance",
}
