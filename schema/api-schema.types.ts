/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about the ECaaS API */
        get: operations["ApiMetadata"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/beta/future-homes-standard-compliance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Check Future Homes Standard (FHS) compliance
         * @description Check compliance with the Future Homes Standard (FHS) based on the energy performance of a building calculated using the Home Energy Model (HEM).
         */
        post: operations["FHSCompliance"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        FhsComplianceResponse: {
            /** @description The calculated DER (Dwelling Emission Rate) of the building. Unit: kgCO₂e/m².yr. */
            dwelling_emission_rate: number;
            /** @description The determined TER (Target Emission Rate) used for the calculation for this building. Unit: kgCO₂e/m².yr. */
            target_emission_rate: number;
            /** @description Whether this calculation determines that the building with the provided properties complies with the Future Homes Standard for emission rate. */
            emission_rate_compliant: boolean;
            /** @description The calculated DPER (Dwelling Primary Energy Rate) of the building. Unit: kWh/m².yr. */
            dwelling_primary_energy_rate: number;
            /** @description The determined TPER (Target Primary Energy Rate) used for the calculation for this building. Unit: kWh/m².yr. */
            target_primary_energy_rate: number;
            /** @description Whether the calculated Dwelling Primary Energy Rate is compliant with FHS. */
            primary_energy_rate_compliant: boolean;
            /** @description The calculated DFEE (Dwelling Fabric Energy Efficiency) of the building. Unit: kWh/m².yr. */
            dwelling_fabric_energy_efficiency: number;
            /** @description The determined TPEE (Target Fabric Energy Efficiency) of the building. Unit: kWh/m².yr. */
            target_fabric_energy_efficiency: number;
            /** @description Whether the calculated Dwelling Fabric Energy Efficiency is compliant with FHS. */
            fabric_energy_efficiency_compliant: boolean;
            energy_demand: components["schemas"]["FhsEnergyDemand"];
            delivered_energy_use: components["schemas"]["FhsDeliveredEnergyUse"];
            energy_use_by_fuel: Record<string, never>;
        };
        FhsDeliveredEnergyUse: {
            total: components["schemas"]["FhsEnergyPerformanceValue"];
            by_system: Record<string, never>;
        };
        FhsEnergyDemand: {
            space_heating: components["schemas"]["FhsEnergyPerformanceValue"];
            space_cooling: components["schemas"]["FhsEnergyPerformanceValue"];
        };
        FhsEnergyPerformanceValue: {
            /** @description The actual measured energy performance for a particular metric. Unit: kWh/m².yr. */
            actual: number;
            /** @description The notional energy performance for a particular metric. Unit: kWh/m².yr. */
            notional: number;
        };
        FhsErrorResponseBody: {
            errors: components["schemas"]["JsonApiOnePointOneErrors"];
            meta: components["schemas"]["FhsMeta"];
        };
        FhsErrorResponseBodyNoMeta: {
            errors: components["schemas"]["JsonApiOnePointOneErrors"];
        };
        FhsMeta: {
            /**
             * @description An identifier representing which version of HEM (the specification) was used, or available to be used, in this calculation.
             * @example 0.32
             */
            hem_version: string;
            /**
             * Format: date
             * @description The date when the version of the HEM specification being used was published. Format: YYYY-MM-DD.
             * @example 2025-02-15
             */
            hem_version_date: string;
            /**
             * @description An identifier representing which version of FHS (Future Homes Standard) (the specification) was used, or available to be used, in this calculation.
             * @example 0.23
             */
            fhs_version: string;
            /**
             * Format: date
             * @description The date when the version of the FHS specification being used was published. Format: YYYY-MM-DD.
             * @example 2025-02-15
             */
            fhs_version_date: string;
            /**
             * @description A unique identifier, usually a SHA, for the version of the HEM software library being used for this calculation.
             * @example 521c68bd9c715f82205d7d1afd7b88d038839d26
             */
            software_version?: string;
            /**
             * @description A unique identifier for the request made against this ECaaS service. This can be referenced when e.g. raising support queries.
             * @example b6e02d18-f919-490e-bd1b-40d85d8ac456
             */
            ecaas_request_id?: string;
        };
        /** @description @member name may contain any valid JSON value. */
        JsonApiOnePointOneAtMemberName: Record<string, never>;
        /** @description A JSON API error object. At least of the properties must be set. */
        JsonApiOnePointOneError: {
            /** @description A unique identifier for this particular occurrence of the problem. */
            id?: string;
            links?: components["schemas"]["JsonApiOnePointOneErrorLinks"];
            /** @description The HTTP status code applicable to this problem, expressed as a string value. */
            status?: string;
            /** @description An application-specific error code, expressed as a string value. */
            code?: string;
            /** @description A short, human-readable summary of the problem. It **SHOULD NOT** change from occurrence to occurrence of the problem, except for purposes of localization. */
            title?: string;
            /** @description A human-readable explanation specific to this occurrence of the problem. */
            detail?: string;
            source?: components["schemas"]["JsonApiOnePointOneErrorSource"];
            meta?: components["schemas"]["JsonApiOnePointOneMeta"];
        };
        /** @description The error links object **MAY** contain the following members: about. */
        JsonApiOnePointOneErrorLinks: {
            about?: components["schemas"]["JsonApiOnePointOneLink"];
            type?: components["schemas"]["JsonApiOnePointOneLink"];
        };
        JsonApiOnePointOneErrorSource: {
            /** @description A JSON Pointer [RFC6901] to the associated entity in the request document [e.g. "/data" for a primary data object, or "/data/attributes/title" for a specific attribute]. */
            pointer?: string;
            /** @description A string indicating which query parameter caused the error. */
            parameter?: string;
            /** @description A string indicating the name of a single request header which caused the error. */
            header?: string;
        };
        JsonApiOnePointOneErrors: components["schemas"]["JsonApiOnePointOneError"][];
        /** @description A link **MUST** be represented as either: a string containing the link's URL or a link object. */
        JsonApiOnePointOneLink: components["schemas"]["JsonApiOnePointOneLinkUrl"] | components["schemas"]["JsonApiOnePointOneLinkObject"];
        JsonApiOnePointOneLinkObject: {
            href: components["schemas"]["JsonApiOnePointOneLinkUrl"];
            meta?: components["schemas"]["JsonApiOnePointOneMeta"];
            rel?: string;
            title?: string;
            type?: string;
            hreflang?: string;
            describedby?: components["schemas"]["JsonApiOnePointOneLink"];
        };
        /**
         * Format: uri
         * @description A string containing the link's URL.
         */
        JsonApiOnePointOneLinkUrl: string;
        /** @description Member name may contain any valid JSON value. */
        JsonApiOnePointOneMemberName: Record<string, never>;
        /** @description A valid string value for a JSON API member name. */
        JsonApiOnePointOneMemberNameString: string;
        /** @description Nonstandard meta-information that can not be represented as an attribute or relationship. */
        JsonApiOnePointOneMeta: components["schemas"]["JsonApiOnePointOneMemberName"] | components["schemas"]["JsonApiOnePointOneAtMemberName"];
        /** @enum {string} */
        Versions: "0.1.0";
        /**
         * MassDistributionClass
         * @enum {string}
         */
        MassDistributionClass: "I: Mass concentrated at internal side" | "E: Mass concentrated at external side" | "IE: Mass divided over internal and external side" | "D: Mass equally distributed" | "M: Mass concentrated inside";
        "fhs_input.schema": {
            Appliances: Record<string, never>;
            /** @description The maximum horizontal distance (in metres) across the building footprint */
            BuildingLength: number;
            /** @description The maximum horizontal distance (in metres) perpendicular to the building length */
            BuildingWidth: number;
            ColdWaterSource: {
                "header tank"?: Record<string, never>;
                "mains water"?: Record<string, never>;
            } & (unknown | unknown);
            Control: Record<string, never>;
            EnergySupply: {
                [key: string]: {
                    /** @enum {unknown} */
                    fuel: "mains_gas" | "electricity" | "lpg_bulk" | "custom" | "wood" | "oil" | "gas" | "coal";
                } & (unknown & unknown & unknown);
            };
            Events: Record<string, never>;
            ExternalConditions: {
                air_temperatures?: number[];
                daylight_savings?: string;
                diffuse_horizontal_radiation?: number[];
                direct_beam_conversion_needed?: boolean;
                direct_beam_radiation?: number[];
                end_day?: number;
                january_first?: number;
                latitude?: number;
                leap_day_included?: boolean;
                longitude?: number;
                shading_segments: {
                    end360: number;
                    shading?: {
                        distance: number;
                        height: number;
                        /** @enum {unknown} */
                        type: "obstacle" | "overhang";
                    }[];
                    start360: number;
                }[];
                solar_reflectivity_of_ground?: number[];
                start_day?: number;
                time_series_step?: number;
                timezone?: number;
                wind_directions?: number[];
                wind_speeds?: number[];
            };
            General: {
                /** @enum {unknown} */
                build_type: "flat" | "house";
                storeys_in_building: number;
            };
            GroundFloorArea?: number;
            HeatSourceWet?: {
                [key: string]: {
                    EnergySupply: string;
                    /** @enum {unknown} */
                    type: "HeatPump" | "Boiler" | "HIU" | "HeatBattery";
                } & (unknown & unknown & unknown & unknown);
            };
            /** @enum {unknown} */
            HeatingControlType: "SeparateTempControl" | "SeparateTimeAndTempControl";
            HotWaterDemand?: {
                Bath?: {
                    [key: string]: {
                        /** @enum {unknown} */
                        ColdWaterSource: "header tank" | "mains water";
                        HotWaterSource?: string;
                        size: number;
                    };
                };
                Other?: {
                    [key: string]: {
                        /** @enum {unknown} */
                        ColdWaterSource: "header tank" | "mains water";
                        HotWaterSource?: string;
                        flowrate: number;
                    };
                };
                Shower?: {
                    [key: string]: {
                        /** @enum {unknown} */
                        ColdWaterSource: "header tank" | "mains water";
                        /** @enum {unknown} */
                        type: "MixerShower" | "InstantElecShower";
                    };
                };
            };
            HotWaterSource: {
                "hw cylinder"?: {
                    /** @enum {unknown} */
                    ColdWaterSource?: "header tank" | "mains water";
                    /** @enum {unknown} */
                    type?: "StorageTank" | "SmartHotWaterTank" | "CombiBoiler" | "PointOfUse" | "HIU" | "HeatBattery";
                } & (unknown & unknown & unknown & unknown & unknown);
            };
            InfiltrationVentilation: {
                CombustionAppliances: {
                    [key: string]: {
                        /** @enum {unknown} */
                        exhaust_situation: "into_room" | "into_separate_duct" | "into_mech_vent";
                        /** @enum {unknown} */
                        fuel_type: "wood" | "gas" | "oil" | "coal";
                        /** @enum {unknown} */
                        supply_situation: "room_air" | "outside";
                    } & (unknown & unknown & unknown);
                };
                Cowls?: Record<string, never>;
                Leaks: {
                    env_area: number;
                    /** @enum {unknown} */
                    test_pressure: "Standard" | "Pulse test only";
                    test_result: number;
                    ventilation_zone_height: number;
                };
                MechanicalVentilation?: {
                    [key: string]: {
                        EnergySupply: string;
                        /**
                         * Sfp In Use Factor
                         * @description Adjustment factor to be applied to SFP to account for e.g. type of ducting. Typical range 1 - 2.5
                         * @default 1
                         */
                        SFP_in_use_factor?: number;
                        design_outdoor_air_flow_rate: number;
                        design_zone_cooling_covered_by_mech_vent?: number;
                        design_zone_heating_covered_by_mech_vent?: number;
                        /** @enum {unknown} */
                        sup_air_flw_ctrl: "ODA" | "LOAD";
                        /** @enum {unknown} */
                        sup_air_temp_ctrl: "NO_CTRL" | "CONST" | "ODA_COMP" | "LOAD_COMP";
                        /** @enum {unknown} */
                        vent_type: "Decentralised continuous MEV" | "Centralised continuous MEV" | "MVHR" | "Intermittent MEV";
                    } & (unknown & unknown & unknown);
                };
                PDUs?: Record<string, never>;
                Vents: {
                    [key: string]: {
                        area_cm2: number;
                        mid_height_air_flow_path: number;
                        orientation360: number;
                        pitch: number;
                    };
                };
                ach_max_static_calcs?: number;
                ach_min_static_calcs?: number;
                altitude: number;
                cross_vent_possible: boolean;
                noise_nuisance: boolean;
                /** @enum {unknown} */
                shield_class: "Open" | "Normal" | "Shielded";
                /** @enum {unknown} */
                terrain_class: "OpenWater" | "OpenField" | "Suburban" | "Urban";
                ventilation_zone_base_height: number;
            };
            /** @description A bathroom is any room that contains a bath or shower */
            NumberOfBathrooms: number;
            NumberOfBedrooms: number;
            /** @description A habitable room is any that is not used solely as a kitchen, bathroom, utility, cellar or sanitary accommodation */
            NumberOfHabitableRooms: number;
            /** @description Any space containing one or more flush toilets or urinals but not a bath or shower. Multiple cubicles counts as one space as long as there is free circulation of air throughout */
            NumberOfSanitaryAccommodations: number;
            /** @description A tapped room is any room with a tapping point (e.g. sink, bath, or shower) */
            NumberOfTappedRooms: number;
            /** @description A utility room is any that contains a sink or other feature or equipment that may reasonably be expected to produce significant quantities of water vapour */
            NumberOfUtilityRooms: number;
            NumberOfWetRooms?: number;
            OnSiteGeneration?: {
                [key: string]: {
                    EnergySupply: string;
                    base_height: number;
                    height: number;
                    inverter_is_inside: boolean;
                    inverter_peak_power_ac: number;
                    inverter_peak_power_dc: number;
                    /** @enum {unknown} */
                    inverter_type: "string_inverter" | "optimised_inverter";
                    orientation360: number;
                    peak_power: number;
                    pitch: number;
                    shading: {
                        depth: number;
                        distance: number;
                        /** @enum {unknown} */
                        type: "reveal" | "obstacle" | "overhang" | "sidefinleft" | "sidefinright";
                    }[];
                    /** @enum {unknown} */
                    type: "PhotovoltaicSystem";
                    /** @enum {unknown} */
                    ventilation_strategy: "unventilated" | "moderately_ventilated" | "strongly_or_forced_ventilated" | "rear_surface_free";
                    width: number;
                };
            };
            PartGcompliance: boolean;
            PartO_active_cooling_required?: boolean;
            SimulationTime: Record<string, never>;
            SpaceCoolSystem?: {
                [key: string]: {
                    EnergySupply: string;
                    advanced_start?: number;
                    cooling_capacity: number;
                    efficiency: number;
                    frac_convective: number;
                    temp_setback?: number;
                    /** @enum {unknown} */
                    type: "AirConditioning";
                };
            };
            SpaceHeatSystem: {
                [key: string]: {
                    /** @enum {unknown} */
                    type: "ElecStorageHeater" | "InstantElecHeater" | "WetDistribution" | "WarmAir";
                } & (unknown & unknown & unknown & unknown);
            };
            WWHRS?: {
                [key: string]: {
                    /** @enum {unknown} */
                    ColdWaterSource: "header tank" | "mains water";
                    flow_rates: number[];
                    /** @description Measured efficiencies for System A at the test flow rates */
                    system_a_efficiencies: number[];
                    /** @description Utilisation factor for System A */
                    system_a_utilisation_factor?: number;
                    /** @description Measured efficiencies for System B (optional, uses system_b_efficiency_factor if not provided) */
                    system_b_efficiencies?: number[];
                    /** @description Reduction factor for System B efficiency (default 0.81) */
                    system_b_efficiency_factor?: number;
                    /** @description Utilisation factor for System B (optional, defaults to system_a_utilisation_factor) */
                    system_b_utilisation_factor?: number;
                    /** @description Measured efficiencies for System C (optional, uses system_c_efficiency_factor if not provided) */
                    system_c_efficiencies?: number[];
                    /** @description Reduction factor for System C efficiency (default 0.87) */
                    system_c_efficiency_factor?: number;
                    /** @description Utilisation factor for System C (optional, defaults to system_a_utilisation_factor) */
                    system_c_utilisation_factor?: number;
                    /** @constant */
                    type: "WWHRS_Instantaneous";
                };
            };
            Zone: {
                [key: string]: {
                    BuildingElement: {
                        [key: string]: ({
                            thermal_resistance_construction?: number;
                            /** @enum {unknown} */
                            type: "BuildingElementAdjacentConditionedSpace" | "BuildingElementAdjacentUnconditionedSpace_Simple" | "BuildingElementGround" | "BuildingElementOpaque" | "BuildingElementTransparent";
                            u_value?: number;
                        } & (unknown & unknown & unknown & unknown & unknown)) | unknown | unknown;
                    };
                    Lighting: {
                        bulbs: {
                            count: number;
                            efficacy: number;
                            power: number;
                        };
                    };
                    SpaceCoolSystem?: string | string[];
                    SpaceHeatSystem?: string | string[];
                    ThermalBridging: {
                        [key: string]: {
                            /** @enum {unknown} */
                            type: "ThermalBridgeLinear" | "ThermalBridgePoint";
                        } & (unknown & unknown);
                    } | number;
                    livingroom_area: number;
                    restofdwelling_area: number;
                    volume: number;
                };
            };
            $defs: {
                /**
                 * MassDistributionClass
                 * @enum {string}
                 */
                MassDistributionClass: "I: Mass concentrated at internal side" | "E: Mass concentrated at external side" | "IE: Mass divided over internal and external side" | "D: Mass equally distributed" | "M: Mass concentrated inside";
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type SchemaFhsComplianceResponse = components['schemas']['FhsComplianceResponse'];
export type SchemaFhsDeliveredEnergyUse = components['schemas']['FhsDeliveredEnergyUse'];
export type SchemaFhsEnergyDemand = components['schemas']['FhsEnergyDemand'];
export type SchemaFhsEnergyPerformanceValue = components['schemas']['FhsEnergyPerformanceValue'];
export type SchemaFhsErrorResponseBody = components['schemas']['FhsErrorResponseBody'];
export type SchemaFhsErrorResponseBodyNoMeta = components['schemas']['FhsErrorResponseBodyNoMeta'];
export type SchemaFhsMeta = components['schemas']['FhsMeta'];
export type SchemaJsonApiOnePointOneAtMemberName = components['schemas']['JsonApiOnePointOneAtMemberName'];
export type SchemaJsonApiOnePointOneError = components['schemas']['JsonApiOnePointOneError'];
export type SchemaJsonApiOnePointOneErrorLinks = components['schemas']['JsonApiOnePointOneErrorLinks'];
export type SchemaJsonApiOnePointOneErrorSource = components['schemas']['JsonApiOnePointOneErrorSource'];
export type SchemaJsonApiOnePointOneErrors = components['schemas']['JsonApiOnePointOneErrors'];
export type SchemaJsonApiOnePointOneLink = components['schemas']['JsonApiOnePointOneLink'];
export type SchemaJsonApiOnePointOneLinkObject = components['schemas']['JsonApiOnePointOneLinkObject'];
export type SchemaJsonApiOnePointOneLinkUrl = components['schemas']['JsonApiOnePointOneLinkUrl'];
export type SchemaJsonApiOnePointOneMemberName = components['schemas']['JsonApiOnePointOneMemberName'];
export type SchemaJsonApiOnePointOneMemberNameString = components['schemas']['JsonApiOnePointOneMemberNameString'];
export type SchemaJsonApiOnePointOneMeta = components['schemas']['JsonApiOnePointOneMeta'];
export type SchemaVersions = components['schemas']['Versions'];
export type SchemaMassDistributionClass = components['schemas']['MassDistributionClass'];
export type SchemaFhsInputSchema = components['schemas']['fhs_input.schema'];
export type $defs = Record<string, never>;
export interface operations {
    ApiMetadata: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FHSCompliance: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["fhs_input.schema"];
            };
        };
        responses: {
            /** @description A summary of a successful HEM calculation to determine compliance with the Future Homes Standard (FHS). */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": {
                        data: components["schemas"]["FhsComplianceResponse"];
                        meta: components["schemas"]["FhsMeta"];
                    };
                };
            };
            /** @description An error denoting that the request could not be processed by the calculator. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["FhsErrorResponseBody"];
                };
            };
            /** @description An error denoting that an error happened at some stage in the ECaaS engine when processing the request. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["FhsErrorResponseBody"];
                };
            };
            /** @description An error denoting that the request has exercised an area of the HEM engine that has not yet been implemented in the MHCLG project. */
            501: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["FhsErrorResponseBody"];
                };
            };
            /** @description An error denoting that a calculation in the ECaaS engine took too long, and the API timed out awaiting a response. */
            504: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["FhsErrorResponseBodyNoMeta"];
                };
            };
        };
    };
}
export enum ApiPaths {
    ApiMetadata = "/",
    FHSCompliance = "/beta/future-homes-standard-compliance"
}
